@page "/"

@using TextWorld.Game

@inject TextWorldGame textWorldGame

<OutputPanel Output=@outputData />
<CommandInput OnEnter=@OnEnter />

@code {
    private List<string> outputData = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        textWorldGame.MOTDSystem.Run(textWorldGame.MOTDEntity, textWorldGame.OutputEntity);
        textWorldGame.RoomDescriptionSystem.Run(textWorldGame.PlayerEntity, textWorldGame.RoomEntities, textWorldGame.OutputEntity);
        RunOutputSystem();
    }

    private void RunOutputSystem()
    {
        var temp = new List<string>();
        foreach (var component in textWorldGame.OutputEntity.GetComponentsByType<OutputComponent>())
        {
            temp.Add(component.Value);
        }
        outputData.AddRange(temp);
    }

    private void OnEnter(string command)
    {
        textWorldGame.OutputEntity.Components.Clear();
        Helper.AddCommandComponentToEntity(textWorldGame.CommandEntity, command);
        textWorldGame.CommandSystem.Run(textWorldGame.CommandEntity, textWorldGame.PlayerEntity, textWorldGame.RoomEntities, textWorldGame.PlayerEntity);

        textWorldGame.RoomMovementSystem.Run(textWorldGame.CommandEntity, textWorldGame.PlayerEntity, textWorldGame.RoomEntities, textWorldGame.OutputEntity);
        textWorldGame.RoomDescriptionSystem.Run(textWorldGame.PlayerEntity, textWorldGame.RoomEntities, textWorldGame.OutputEntity);
        textWorldGame.ItemsSystem.Run(textWorldGame.PlayerEntity, textWorldGame.RoomEntities, textWorldGame.OutputEntity);
        textWorldGame.UnknownCommandSystem.Run(textWorldGame.CommandEntity, textWorldGame.OutputEntity);

        RunOutputSystem();
    }
}